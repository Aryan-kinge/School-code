""" Author = Aryan Kinge
    Date = Winter 2018
    Project = Tic Tac Toe Project
"""
import random
import os
board = [" " for x in range(10)]
# Creates a list which can be mutable later on when adding characters into the board

def clearScreen():
    os.system('cls'if os.name == 'nt' else 'clear')
    # Clears the board in terminal mode

def insertLetter(letter, pos):
    board[pos] = letter
    # This is a function which Inserts an "X" or "O" depending on whose move it is


def spaceIsFree(pos):
    return board[pos] == " "
    # This is a function which checks if a certain space cell on the board is free


def printBoard(board):
    # This function prints the board in a visual manner so it is easier for the user to see it
    print("   ¦   ¦")
    print(" " + board[1] + " ¦ " + board[2] + " ¦ " + board[3])
    # Each time a list is called as in: board[1], its creates a mutable cell in the board which can be later replaced
    print("   ¦   ¦")
    print("-----------")
    print("   ¦   ¦")
    print(" " + board[4] + " ¦ " + board[5] + " ¦ " + board[6])
    print("   ¦   ¦")
    print("-----------")
    print("   ¦   ¦")
    print(" " + board[7] + " ¦ " + board[8] + " ¦ " + board[9])
    print("   ¦   ¦")


def isWinner(bo, le):
    return (bo[7] == le and bo[8] == le and bo[9] == le) or \
           (bo[4] == le and bo[5] == le and bo[6] == le) or \
           (bo[1] == le and bo[2] == le and bo[3] == le) or \
           (bo[1] == le and bo[4] == le and bo[7] == le) or \
           (bo[2] == le and bo[5] == le and bo[8] == le) or \
           (bo[3] == le and bo[6] == le and bo[9] == le) or \
           (bo[1] == le and bo[5] == le and bo[9] == le) or \
           (bo[3] == le and bo[5] == le and bo[7] == le)
    # This function checks if there is a winner through any of these possible combinations


def playerMove():  # This function is allowing the player to pick a position on the bosrd to play in for their turn
    global playerchar
    run = True
    while run:
        try:
            pick = int(input("Please pick a cell between 1 and 9 where you want to place your character"))
            pick = int(pick)
            if pick > 0 and pick < 10:  # Checks if the number of cell entered is in the range of 1 to 9
                insertLetter(playerchar, pick)  # Uses a predefined function
                run = False  # Changing run to false means that we can break out of this loop
            else:
                print("Please enter a number between 1 and 9!")
        except:
            print("Please enter a number!")
            # This except ensures that the program will not crash if anything is wrongly entered


def compMove():  # This function brings in the prospect of artificial intelligence and allows the computer to move
    global playerchar  # Making variables global means that they can be used in different functions in the entire code
    global compchar
    possibleMoves = [x for x, letter in enumerate(board) if letter == " " and x != 0]
    """ This list is crucial in creating teh Ai as it contains all the possible moves and spaces remaining in the board
    so far. Also, later on, we can take out the corner spaces from this list, the edges and even the middle space
    to help choose where the Ai will place it character. Enumerate means that it returns both the indexes and the
    elements in the given list... In this case, it is our board list"""
    mov = 0

    for let in [compchar, playerchar]:
        """ Before the computer can make a move, it needs to check if there is a move
        with which it can win, then if there is a move where the player can block it, either way, the computer moves
        to block or win."""
        for i in possibleMoves:
            boardCopy = board[:]
            boardCopy[i] = let
            if isWinner(boardCopy, let):
                mov = i
                return mov
    if 5 in possibleMoves:  # Checks if the middle is free if the last check returned 0
        mov = 5
        return mov
    cornersOpen = [] # Creates a new list just to check if there are any corner spaces open if the last check returned 0
    for i in possibleMoves:
        if i in [1, 3, 7, 9]:  # If these corner spaces are in the possible moves list...
            cornersOpen.append(i)  # It alters the corners open list to accommodate these values
    if len(cornersOpen) > 0:  # Then, we need to check if there are actually any corner spaces open
        mov = selectRandom(cornersOpen)  # If there are spaces open, then it randomly picks one of these spaces to move
        return mov

    edgesOpen = []  # Same layout as last check but for edges this time
    for i in possibleMoves:
        if i in [2, 4, 6, 8]:
            edgesOpen.append(i)  # This time, it appends the edges open list if here are any edge spaces available
    if len(edgesOpen) > 0:
        mov = selectRandom(edgesOpen) # This time, if there are any edges open, it randomly selects one of these to move
    return mov


def selectRandom(li):  # This function was called in the previous function of compchar
    import random
    ln = len(li)
    r = random.randrange(0, ln)  # takes the values of the list and selects randomly between them
    return li[r]  # Returns the list element which has been represented by the randomly selected list index


def isBoardFull(board):  # This function simply checks if the board is full, it is called in the main game loop
    if board.count(" ") > 1:
        return False
    else:
        return True


def main():  # This is the main game loop where all of the previous functions are brought together to make a game!
    global playerchar
    global compchar
    rnd = random.randint(0, 1)  # This simply assigns a character to the player and computer for each game
    if rnd == 0:  # Depending on whether the number which is randomly picked is 1 or 0, it assigns a character to both
        playerchar = "O"
        compchar = "X"
    else:
        playerchar = "O"
        compchar = "X"

    print("Your character is", playerchar)  # Prints the character for the player to see
    while not(isBoardFull(board)):  # While the board isn't full, this loop runs
        if not (isWinner(board, compchar)): # Checks if the computer is the winner before letting the player make a move
            playerMove()
            print(printBoard(board))  # Prints the board every time there is a move being made so the player can see
        else:
            printBoard(board)
            print("Sorry, The computer has won this time!")  # Prints that the computer has won and breaks out of loop
            break
        if not (isWinner(board, playerchar)):  # Straight after the player has moved, if the player isn't the winner...
            move = compMove()  # The computer moves
            if move == 0:  # If the Computer can't move and returns 0, then the game is clearly a draw
                if isBoardFull(board):  # However, to be sure, we need to make another check
                    print("Tie Game!")

            else:
                insertLetter(compchar, move)  # If the computer can move, it puts the computer character into the board
                print("Computer has placed letter in position", move,  ":")  # For the player's information
                printBoard(board)

        else:  # However, if the player has won, the game will print a message and exit the loop
            printBoard(board)
            print("Congratulations! You have won!")
            break


main()  # Here, we call the main loop, but also create a piece of code which checks if the player wants to play again
again = str(input("Do you want to play again? Yes or No?"))  # Requires a player input
while again is True:
    if again == "Yes" or "yes":
        print("hello")
        board = [" " for i in range(10)]
        main()
    elif again == "No" or "no":
        print("Ok sure, but come and play again soon!")
        again = False  # We change the variable to become false to break out of the loop

    else:
        again = str(input("Please write Yes or No!"))
        # To catch out smart players, we make sure that they input a valid answer by adding an else statement

